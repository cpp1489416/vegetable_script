
expression ::=
    equal_expression;

equal_expression ::=
    comma_expression,
    comma_expression "=" comma_expression;

comma_expression ::=
    multiply_expression ["," multiply_expression];

plus_expression ::=
    multiply_expression "+" plus_expression,
    multiply_expression "-" plus_expression,
    multiply_expression;

multiply_expression ::=
    negative_expression "*" multiply_expression,
    negative_expression "/" multiply_expression,
    negative_expression;

unary_expression ::=
    "+" single_expression,
    "-" single_expression,
    single_expression;

single_expression ::=
    "(" expression ")",
    number_token,
    string_token,
    identifier_token,
    identifier_token "(" argument_list ")";

argument_list ::=
    "" | expression { "," expression };

statement ::=
    expression ";",
    block_statement,
    "if" "(" expression ")" statement { "else" statement },
    "while" "(" expression ")" statement,
    "for" "(" statement expression ";" expression ")" statement;

block_statement ::=
    "{" [statement] "}";